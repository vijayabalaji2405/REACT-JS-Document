{"ast":null,"code":"import { firebase, FieldValue } from \"../lib/firebase\";\nexport async function doesUsernameExist(username) {\n  const result = await firebase.firestore().collection(\"users\").where(\"username\", \"==\", username).get();\n  return result.docs.map(user => user.data().length > 0);\n}\nexport async function getUserByUserId(userId) {\n  const result = await firebase.firestore().collection(\"users\").where(\"userId\", \"==\", userId).get();\n  const user = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n  return user;\n}\nexport async function getUserFollowedPhotos(userId, followingUserIds) {\n  console.log(userId, followingUserIds);\n  const result = await firebase.firestore().collection(\"photos\").where(\"userId\", \"in\", followingUserIds).get();\n  const userFollowedPhotos = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n  const photosWithUserDetails = await Promise.all(userFollowedPhotos.map(async photo => {\n    let userLikedPhoto = false;\n\n    if (photo.likes.includes(userId)) {\n      userLikedPhoto = true;\n    }\n\n    const user = await getUserByUserId(photo.userId);\n    const username = user[0].username;\n    return {\n      username,\n      ...photo,\n      userLikedPhoto\n    };\n  }));\n  return photosWithUserDetails;\n}","map":{"version":3,"sources":["/Users/vijayabalaji/Desktop/challenges/Instagram/instagram/src/services/firebase.js"],"names":["firebase","FieldValue","doesUsernameExist","username","result","firestore","collection","where","get","docs","map","user","data","length","getUserByUserId","userId","item","docId","id","getUserFollowedPhotos","followingUserIds","console","log","userFollowedPhotos","photosWithUserDetails","Promise","all","photo","userLikedPhoto","likes","includes"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,iBAArC;AAEA,OAAO,eAAeC,iBAAf,CAAiCC,QAAjC,EAA2C;AAChD,QAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAC1BK,SADkB,GAElBC,UAFkB,CAEP,OAFO,EAGlBC,KAHkB,CAGZ,UAHY,EAGA,IAHA,EAGMJ,QAHN,EAIlBK,GAJkB,EAArB;AAMA,SAAOJ,MAAM,CAACK,IAAP,CAAYC,GAAZ,CAAiBC,IAAD,IAAUA,IAAI,CAACC,IAAL,GAAYC,MAAZ,GAAqB,CAA/C,CAAP;AACD;AAED,OAAO,eAAeC,eAAf,CAA+BC,MAA/B,EAAuC;AAC5C,QAAMX,MAAM,GAAG,MAAMJ,QAAQ,CAC1BK,SADkB,GAElBC,UAFkB,CAEP,OAFO,EAGlBC,KAHkB,CAGZ,QAHY,EAGF,IAHE,EAGIQ,MAHJ,EAIlBP,GAJkB,EAArB;AAMA,QAAMG,IAAI,GAAGP,MAAM,CAACK,IAAP,CAAYC,GAAZ,CAAiBM,IAAD,KAAW,EACtC,GAAGA,IAAI,CAACJ,IAAL,EADmC;AAEtCK,IAAAA,KAAK,EAAED,IAAI,CAACE;AAF0B,GAAX,CAAhB,CAAb;AAKA,SAAOP,IAAP;AACD;AAED,OAAO,eAAeQ,qBAAf,CAAqCJ,MAArC,EAA6CK,gBAA7C,EAA+D;AACpEC,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAAoBK,gBAApB;AACA,QAAMhB,MAAM,GAAG,MAAMJ,QAAQ,CAC1BK,SADkB,GAElBC,UAFkB,CAEP,QAFO,EAGlBC,KAHkB,CAGZ,QAHY,EAGF,IAHE,EAGIa,gBAHJ,EAIlBZ,GAJkB,EAArB;AAMA,QAAMe,kBAAkB,GAAGnB,MAAM,CAACK,IAAP,CAAYC,GAAZ,CAAiBM,IAAD,KAAW,EACpD,GAAGA,IAAI,CAACJ,IAAL,EADiD;AAEpDK,IAAAA,KAAK,EAAED,IAAI,CAACE;AAFwC,GAAX,CAAhB,CAA3B;AAKA,QAAMM,qBAAqB,GAAG,MAAMC,OAAO,CAACC,GAAR,CAClCH,kBAAkB,CAACb,GAAnB,CAAuB,MAAOiB,KAAP,IAAiB;AACtC,QAAIC,cAAc,GAAG,KAArB;;AACA,QAAID,KAAK,CAACE,KAAN,CAAYC,QAAZ,CAAqBf,MAArB,CAAJ,EAAkC;AAChCa,MAAAA,cAAc,GAAG,IAAjB;AACD;;AACD,UAAMjB,IAAI,GAAG,MAAMG,eAAe,CAACa,KAAK,CAACZ,MAAP,CAAlC;AACA,UAAMZ,QAAQ,GAAGQ,IAAI,CAAC,CAAD,CAAJ,CAAQR,QAAzB;AACA,WAAO;AAAEA,MAAAA,QAAF;AAAY,SAAGwB,KAAf;AAAsBC,MAAAA;AAAtB,KAAP;AACD,GARD,CADkC,CAApC;AAYA,SAAOJ,qBAAP;AACD","sourcesContent":["import { firebase, FieldValue } from \"../lib/firebase\";\n\nexport async function doesUsernameExist(username) {\n  const result = await firebase\n    .firestore()\n    .collection(\"users\")\n    .where(\"username\", \"==\", username)\n    .get();\n\n  return result.docs.map((user) => user.data().length > 0);\n}\n\nexport async function getUserByUserId(userId) {\n  const result = await firebase\n    .firestore()\n    .collection(\"users\")\n    .where(\"userId\", \"==\", userId)\n    .get();\n\n  const user = result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id,\n  }));\n\n  return user;\n}\n\nexport async function getUserFollowedPhotos(userId, followingUserIds) {\n  console.log(userId, followingUserIds);\n  const result = await firebase\n    .firestore()\n    .collection(\"photos\")\n    .where(\"userId\", \"in\", followingUserIds)\n    .get();\n\n  const userFollowedPhotos = result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id,\n  }));\n\n  const photosWithUserDetails = await Promise.all(\n    userFollowedPhotos.map(async (photo) => {\n      let userLikedPhoto = false;\n      if (photo.likes.includes(userId)) {\n        userLikedPhoto = true;\n      }\n      const user = await getUserByUserId(photo.userId);\n      const username = user[0].username;\n      return { username, ...photo, userLikedPhoto };\n    })\n  );\n\n  return photosWithUserDetails;\n}\n"]},"metadata":{},"sourceType":"module"}