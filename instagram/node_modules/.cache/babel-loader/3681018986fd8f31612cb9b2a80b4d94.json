{"ast":null,"code":"import { firebase, FieldValue } from '../lib/firebase';\nexport async function doesUsernameExist(username) {\n  const result = await firebase.firestore().collection('users').where('username', '==', username).get();\n  return result.docs.map(user => user.data().length > 0);\n}\nexport async function getUserByUserId(userId) {\n  const result = await firebase.firestore().collection('users').where('userId', '==', userId).get();\n  const user = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n  return user;\n}\nexport async function getUserFollowedPhotos(userId, followingUserIds) {\n  const result = await firebase.firestore().collection('photos').where('userId', 'in', followingUserIds).get();\n  const userFollowedPhotos = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n  const photosWithUserDetails = await Promise.all(userFollowedPhotos.map(async photo => {\n    let userLikedPhoto = false;\n\n    if (photo.likes.includes(userId)) {\n      userLikedPhoto = true;\n    }\n\n    const user = await getUserByUserId(photo.userId);\n    const username = user[0].username;\n    return {\n      username,\n      ...photo,\n      userLikedPhoto\n    };\n  }));\n  return photosWithUserDetails;\n}\nexport async function getSuggestedProfiles(userId) {\n  const result = await firebase.firestore().collection('users').limit(10).get();\n  const [{\n    following\n  }] = await getUserByUserId(userId);\n  return result.docs.map(user => ({ ...user.data(),\n    docId: user.id\n  })).filter(profile => profile.userId !== userId && !following.includes(profile.userId));\n}\nexport async function updateUserFollowing(docId, profileId, isFollowingProfile) {\n  return firebase.firestore().collection('users').doc(docId).update({\n    following: isFollowingProfile ? FieldValue.arrayRemove(profileId) : FieldValue.arrayUnion(profileId)\n  });\n}\nexport async function updateFollowedUserFollowers(docId, followingUserId, isFollowingProfile) {\n  return firebase.firestore().collection('users').doc(docId).update({\n    following: isFollowingProfile ? FieldValue.arrayRemove(followingUserId) : FieldValue.arrayUnion(followingUserId)\n  });\n}\nexport async function getUserByUsername(username) {\n  const result = await firebase.firestore().collection('users').where('username', '==', username).get();\n  const user = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n  return user.length > 0 ? user : false;\n}","map":{"version":3,"sources":["/Users/vijayabalaji/Desktop/challenges/Instagram/instagram/src/services/firebase.js"],"names":["firebase","FieldValue","doesUsernameExist","username","result","firestore","collection","where","get","docs","map","user","data","length","getUserByUserId","userId","item","docId","id","getUserFollowedPhotos","followingUserIds","userFollowedPhotos","photosWithUserDetails","Promise","all","photo","userLikedPhoto","likes","includes","getSuggestedProfiles","limit","following","filter","profile","updateUserFollowing","profileId","isFollowingProfile","doc","update","arrayRemove","arrayUnion","updateFollowedUserFollowers","followingUserId","getUserByUsername"],"mappings":"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","sourcesContent":["import { firebase, FieldValue } from '../lib/firebase';\n\nexport async function doesUsernameExist(username) {\n    const result = await firebase\n        .firestore()\n        .collection('users')\n        .where('username', '==', username)\n        .get();\n        \n    return result.docs.map((user) => user.data().length > 0);\n}\n\nexport async function getUserByUserId(userId) {\n    const result = await firebase\n        .firestore()\n        .collection('users')\n        .where('userId', '==', userId)\n        .get();\n        \n    const user = result.docs.map((item) => ({\n        ...item.data(),\n        docId: item.id\n    }));\n \n    return user;       \n}\n\nexport async function getUserFollowedPhotos(userId, followingUserIds) {\n    const result = await firebase\n        .firestore()\n        .collection('photos')\n        .where('userId', 'in', followingUserIds)\n        .get();\n        \n    const userFollowedPhotos = result.docs.map((item) => ({\n        ...item.data(),\n        docId: item.id\n    }));\n    \n    const photosWithUserDetails = await Promise.all(\n        userFollowedPhotos.map(async (photo) => {\n            let userLikedPhoto = false;\n            if (photo.likes.includes(userId)) {\n                userLikedPhoto = true;\n            }\n            const user = await getUserByUserId(photo.userId);\n            const username = user[0].username;\n            return { username, ...photo, userLikedPhoto };\n        })\n    );\n    \n    return photosWithUserDetails;\n}\n\nexport async function getSuggestedProfiles(userId) {\n    const result = await firebase.firestore().collection('users').limit(10).get();\n    const [{ following }] = await getUserByUserId(userId);\n        \n    return result.docs\n        .map((user) => ({ ...user.data(), docId: user.id }))\n        .filter((profile) => profile.userId !== userId && !following.includes(profile.userId));\n}\n    \nexport async function updateUserFollowing(docId, profileId, isFollowingProfile) {\n    return firebase\n        .firestore()\n        .collection('users')\n        .doc(docId)\n        .update({\n            following: isFollowingProfile\n                ? FieldValue.arrayRemove(profileId)\n                : FieldValue.arrayUnion(profileId)\n        });\n}\n\nexport async function updateFollowedUserFollowers(docId, followingUserId, isFollowingProfile) {\n    return firebase\n        .firestore()\n        .collection('users')\n        .doc(docId)\n        .update({\n            following: isFollowingProfile\n                ? FieldValue.arrayRemove(followingUserId)\n                : FieldValue.arrayUnion(followingUserId)\n        });\n}\n\nexport async function getUserByUsername(username) {\n    const result = await firebase\n        .firestore()\n        .collection('users')\n        .where('username', '==', username)\n        .get();\n        \n    const user = result.docs.map((item) => ({\n        ...item.data(),\n        docId: item.id\n    }));\n \n    return user.length > 0 ? user : false;  \n}"]},"metadata":{},"sourceType":"module"}