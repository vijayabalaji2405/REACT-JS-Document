{"ast":null,"code":"var _jsxFileName = \"/Users/vijayabalaji/Desktop/challenges/Instagram/instagram/src/components/timeline.js\";\nimport React from \"react\";\nimport Skeleton from \"react-loading-skeleton\"; // Challenge: Implement 'react-loading-skeleton'\n// Acceptance Criteria\n//   - Import 'react-loading-skeleton' as a default\n//   - Check if we have photos, if we don't, render out React loading skeleton with the following props:\n//\t- count={4}\n//\t- width={640}\n//\t- height={500}\n//\t- className=\"mb-5\"\n//   - If we have photos, go ahead and map over the photos (use a dummy value on the return, e.g. <p>I will be a photo!</p>\n// References\n//   - https://www.npmjs.com/package/react-loading-skeleton\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timeline() {\n  const photos = [1, 2, 3, 4, 5];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container col-span-2\",\n    children: !photos ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      count: 4,\n      width: 640,\n      height: 500,\n      className: \"mb-5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this) : photos.map(content => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"I will be a photo!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 33\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_c = Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/Users/vijayabalaji/Desktop/challenges/Instagram/instagram/src/components/timeline.js"],"names":["React","Skeleton","Timeline","photos","map","content"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAMC,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAf;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,cACG,CAACA,MAAD,gBACC,QAAC,QAAD;AAAU,MAAA,KAAK,EAAE,CAAjB;AAAoB,MAAA,KAAK,EAAE,GAA3B;AAAgC,MAAA,MAAM,EAAE,GAAxC;AAA6C,MAAA,SAAS,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,YADD,GAGCA,MAAM,CAACC,GAAP,CAAYC,OAAD,iBAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAxB;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AASD;KAZuBH,Q","sourcesContent":["import React from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\n\n// Challenge: Implement 'react-loading-skeleton'\n\n// Acceptance Criteria\n//   - Import 'react-loading-skeleton' as a default\n//   - Check if we have photos, if we don't, render out React loading skeleton with the following props:\n//\t- count={4}\n//\t- width={640}\n//\t- height={500}\n//\t- className=\"mb-5\"\n//   - If we have photos, go ahead and map over the photos (use a dummy value on the return, e.g. <p>I will be a photo!</p>\n\n// References\n//   - https://www.npmjs.com/package/react-loading-skeleton\n\nexport default function Timeline() {\n  const photos = [1, 2, 3, 4, 5];\n\n  return (\n    <div className=\"container col-span-2\">\n      {!photos ? (\n        <Skeleton count={4} width={640} height={500} className=\"mb-5\" />\n      ) : (\n        photos.map((content) => <p>I will be a photo!</p>)\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}