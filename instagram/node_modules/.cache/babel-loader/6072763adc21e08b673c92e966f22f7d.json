{"ast":null,"code":"import { firebase, FieldValue } from \"../lib/firebase\";\nexport async function doesUsernameExist(username) {\n  const result = await firebase.firestore().collection(\"users\").where(\"username\", \"==\", username).get();\n  return result.docs.map(user => user.data().length > 0);\n}\nexport async function getUserByUserId(userId) {\n  const result = await firebase.firestore().collection(\"users\").where(\"userId\", \"==\", userId).get();\n  const user = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n  return user;\n}\nexport async function getUserFollowedPhotos(userId, followingUserIds) {\n  const result = await firebase.firestore().collection(\"photos\").where(\"userId\", \"in\", followingUserIds).get();\n  const userFollowedPhotos = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n  const photosWithUserDetails = await Promise.all(userFollowedPhotos.map(async photo => {\n    let userLikedPhoto = false;\n\n    if (photo.likes.includes(userId)) {\n      userLikedPhoto = true;\n    }\n\n    const user = await getUserByUserId(photo.userId);\n    const username = user[0].username;\n    return {\n      username,\n      ...photo,\n      userLikedPhoto\n    };\n  }));\n  return photosWithUserDetails;\n}\nexport async function getSuggestedProfiles(userId) {\n  const result = await firebase.firestore().collection(\"users\").limit(10).get();\n  console.log({\n    following: userFollowing = []\n  });\n  const [{\n    following: userFollowing = []\n  }] = result.docs.map(user => user.data()).filter(profile => profile.userId === userId);\n  return result.docs.map(user => ({ ...user.data(),\n    docId: user.id\n  })).filter(profile => profile.userId !== userId && !userFollowing.includes(profile.userId));\n}","map":{"version":3,"sources":["/Users/vijayabalaji/Desktop/challenges/Instagram/instagram/src/services/firebase.js"],"names":["firebase","FieldValue","doesUsernameExist","username","result","firestore","collection","where","get","docs","map","user","data","length","getUserByUserId","userId","item","docId","id","getUserFollowedPhotos","followingUserIds","userFollowedPhotos","photosWithUserDetails","Promise","all","photo","userLikedPhoto","likes","includes","getSuggestedProfiles","limit","console","log","following","userFollowing","filter","profile"],"mappings":"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","sourcesContent":["import { firebase, FieldValue } from \"../lib/firebase\";\n\nexport async function doesUsernameExist(username) {\n  const result = await firebase\n    .firestore()\n    .collection(\"users\")\n    .where(\"username\", \"==\", username)\n    .get();\n\n  return result.docs.map((user) => user.data().length > 0);\n}\n\nexport async function getUserByUserId(userId) {\n  const result = await firebase\n    .firestore()\n    .collection(\"users\")\n    .where(\"userId\", \"==\", userId)\n    .get();\n\n  const user = result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id,\n  }));\n\n  return user;\n}\n\nexport async function getUserFollowedPhotos(userId, followingUserIds) {\n  const result = await firebase\n    .firestore()\n    .collection(\"photos\")\n    .where(\"userId\", \"in\", followingUserIds)\n    .get();\n\n  const userFollowedPhotos = result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id,\n  }));\n\n  const photosWithUserDetails = await Promise.all(\n    userFollowedPhotos.map(async (photo) => {\n      let userLikedPhoto = false;\n      if (photo.likes.includes(userId)) {\n        userLikedPhoto = true;\n      }\n      const user = await getUserByUserId(photo.userId);\n      const username = user[0].username;\n      return { username, ...photo, userLikedPhoto };\n    })\n  );\n\n  return photosWithUserDetails;\n}\nexport async function getSuggestedProfiles(userId) {\n  const result = await firebase.firestore().collection(\"users\").limit(10).get();\n  console.log({ following: (userFollowing = []) });\n  const [{ following: userFollowing = [] }] = result.docs\n    .map((user) => user.data())\n    .filter((profile) => profile.userId === userId);\n\n  return result.docs\n    .map((user) => ({ ...user.data(), docId: user.id }))\n    .filter(\n      (profile) =>\n        profile.userId !== userId && !userFollowing.includes(profile.userId)\n    );\n}\n"]},"metadata":{},"sourceType":"module"}